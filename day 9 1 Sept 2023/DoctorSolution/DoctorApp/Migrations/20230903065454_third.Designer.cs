// <auto-generated />
using System;
using DoctorApp.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DoctorApp.Migrations
{
    [DbContext(typeof(DoctorAppContexts))]
    [Migration("20230903065454_third")]
    partial class third
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DoctorApp.Models.Appointment", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DoctorId", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("appointments");
                });

            modelBuilder.Entity("DoctorApp.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DoctorId"));

                    b.Property<int?>("AppointmentDoctorId")
                        .HasColumnType("integer");

                    b.Property<int?>("AppointmentPatientId")
                        .HasColumnType("integer");

                    b.Property<string>("DoctorEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Doctorphone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearOfExp")
                        .HasColumnType("integer");

                    b.Property<string>("pic")
                        .HasColumnType("text");

                    b.HasKey("DoctorId");

                    b.HasIndex("AppointmentDoctorId", "AppointmentPatientId");

                    b.ToTable("doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            DoctorEmail = "abc@gmail.com",
                            DoctorName = "Deva1",
                            Doctorphone = "1236541256",
                            Speciality = "Surgen",
                            YearOfExp = 4,
                            pic = "/Images/pic1.jpeg"
                        },
                        new
                        {
                            DoctorId = 2,
                            DoctorEmail = "xyz@gmail.com",
                            DoctorName = "Deva2",
                            Doctorphone = "8856904770",
                            Speciality = "General",
                            YearOfExp = 4,
                            pic = "/Images/pic2.jpeg"
                        });
                });

            modelBuilder.Entity("DoctorApp.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientId"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("AppointmentDoctorId")
                        .HasColumnType("integer");

                    b.Property<int?>("AppointmentPatientId")
                        .HasColumnType("integer");

                    b.Property<string>("PatientEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatientPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PatientId");

                    b.HasIndex("AppointmentDoctorId", "AppointmentPatientId");

                    b.ToTable("patients");

                    b.HasData(
                        new
                        {
                            PatientId = 101,
                            Age = 23,
                            PatientEmail = "ramu1@gmail.com",
                            PatientName = "Ramu1",
                            PatientPhone = "8525852252"
                        },
                        new
                        {
                            PatientId = 102,
                            Age = 50,
                            PatientEmail = "ramu2@gmail.com",
                            PatientName = "Ramu2",
                            PatientPhone = "00012102151"
                        });
                });

            modelBuilder.Entity("DoctorApp.Models.Appointment", b =>
                {
                    b.HasOne("DoctorApp.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorApp.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorApp.Models.Doctor", b =>
                {
                    b.HasOne("DoctorApp.Models.Appointment", null)
                        .WithMany("Doctors")
                        .HasForeignKey("AppointmentDoctorId", "AppointmentPatientId");
                });

            modelBuilder.Entity("DoctorApp.Models.Patient", b =>
                {
                    b.HasOne("DoctorApp.Models.Appointment", null)
                        .WithMany("Patients")
                        .HasForeignKey("AppointmentDoctorId", "AppointmentPatientId");
                });

            modelBuilder.Entity("DoctorApp.Models.Appointment", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
